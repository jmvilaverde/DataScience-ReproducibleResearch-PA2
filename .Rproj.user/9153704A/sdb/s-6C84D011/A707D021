{
    "contents" : "---\ntitle: Data Science - Reproducible Research - Peer Assessment 2 - Analysis of Weather Event in US and Harmful and Economic impact using NOAA Storm Database \nauthor: \"by jmvilaverde\"\ndate: \"Monday, June 15, 2015\"\noutput:\n  html_document:\n    keep_md: yes\n    pandoc_args:\n    - +RTS\n    - -K64m\n    - -RTS\n---\n\n\n\n\n***\n\n\n##Synopsis: \n\nBased on data extracted from NOAA Storm Database for event registered in US from year 1996 to present, and analyzed with the procedure described in next section _Data Processing_, are obtained the subsequent conclusions:\n\nHuman harmful:\n* TOP 3 most harmful events are TORNADO (33.9%), HEAT (14.3%) and FLOOD (11%) with a 59.2 % of total harmful of all events. \n* TOP 10 is 86 % of total harmful a total of 56179 fatalities or people injured.\n\nEconomic damages:\n* TOP 3 event types that causes most economic damages are TORNADO (33.9%), HEAT (14.3%) and FLOOD (11%) with a 59.2 % of total harmful of all events. \n* TOP 10 is 86 % of total economic damages \n\n_Can view detail in section Results._\n\n##Data Processing\n\n1. First step, adquire the date from [https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2] and put it into a data frame container:\n\n```{r dataAdquisition, echo=TRUE, cache=TRUE}\n#Set data path, using setInternet2 to avoid problems with https download\nsetInternet2(use = TRUE)\ndataPath <- \"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2\"\nfileName <- \"StormData.csv.bz2\"\n\n#Download the file\nif (!file.exists(fileName)) download.file(url = dataPath, destfile = fileName)\n\n#Extract bz2 file to a dataframe\ndataInitial <- read.csv(bzfile(fileName))\n```\n\n> As additional information, on http://www.ncdc.noaa.gov/stormevents/details.jsp?type=eventtype\n> inform about information recolection, and only have a complete collection from 1996 to present:\n> _3. All Event Types (48 from Directive 10-1605): From 1996 to present, 48 event types are recorded as defined in NWS Directive 10-1605._\n\nBecause only have a complete collection from 1996 to present is taken as criteria to filter the data to keep only information from 1996 to present.\n\n2. Get only relevant fields:\n\n```{r echo=TRUE}\n#Identify fields\nnames(dataInitial)\n```\n\nFor our process are needed: BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP.\n\nAre relevant for filter Date (BGN_DATE) and States (STATE).\n\n3. Analyze BGN_DATE and STATE, in order to know what class have the data and how to process it: \n\n```{r echo=TRUE}\n#Identify structure\nstr(dataInitial$BGN_DATE)\nhead(dataInitial$BGN_DATE)\nstr(dataInitial$STATE)\n```\n\nBGN_DATE and STATE are factors.\n\n4. We need to transform BGN_DATE from factor into a Date class in order to filter by year.\n\n```{r filterDate, echo=TRUE}\n\n#Use library lubridate to manage Date\nlibrary(lubridate)\n\n#Transform BGN_DATE into a class  Date\ndataInitial$date <- as.Date(dataInitial$BGN_DATE, format = \"%m/%d/%Y\")\nclass(dataInitial$date)\n\n#Data filtered by year >= 1996\ndataYearProcessed <- dataInitial[year(dataInitial$date)>=1996,]\n\n#Percent of data removed filtering by Year\npercentDataRemYear <- round((1-(nrow(dataYearProcessed)/nrow(dataInitial))) * 100, 2)\n```\n\nThis filter has removed `r percentDataRemYear`% of data.\n\n5. Filter to get only data from US States:\n\n```{r filterStates, echo=TRUE}\n#Data filtered by States\ndataStatesProcessed <- dataYearProcessed[dataYearProcessed$STATE %in% state.abb,]\n\n#Percent of data removed filtering by State\npercentDataRemStates <- round((1- (nrow(dataStatesProcessed)/nrow(dataYearProcessed)))*100, 2)\n```\n\nThis filter has removed `r percentDataRemStates`% of data from precedent filter.\n\n\n6. Select necesary fields: EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP.\n\n```{r processFilterData, echo=TRUE}\nlibrary(dplyr)\n\n#Select only necesary fields: Type of event, Number of fatalities, Number of injuries, Property damages, Property damages exponent,\n#Crop damages, and Crop damages exponent.\ndataStatesProcessed %>% \n        select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) -> dataPreprocessed\n```\n\n7. Evaluate event types and clean. Do this by unifying and removing event types:\n\nUse [http://www.ncdc.noaa.gov/stormevents/pd01016005curr.pdf] to clean types.\n\n* Unify TSTM WIND with THUNDERSTORM WIND.\n* Unify EXCESSIVE HEAT with HEAT.\n* Remove Summary, that is not an Event Type.\n\n```{r echo=TRUE}\n#Evaluate how many levels have the dataset\nunique(dataPreprocessed$EVTYPE)\n\n##Running the report, are detected some Events that are repeated in the top 10 table.\n#TSTM WIND it's the same as THUNDERSTORM WIND. We make the sustitution on data\ndataPreprocessed[grepl(pattern = \"TSTM WIND\", x=dataPreprocessed$EVTYPE),]$EVTYPE <- \"THUNDERSTORM WIND\"\n\n#EXCESSIVE HEAT it's the same as HEAT. We make the sustitution on data\ndataPreprocessed[grepl(pattern = \"EXCESSIVE HEAT\", x=dataPreprocessed$EVTYPE),]$EVTYPE <- \"HEAT\"\n\n#Remove Summary from event type\ndataPreprocessed <- dataPreprocessed[!grepl(pattern = \"Summary\", x=dataPreprocessed$EVTYPE),]\n```\n\n8. Analyze content of PROPDMGEXP and CROPDMGEXP:\n\n```{r echo=TRUE}\nsummary(dataPreprocessed$PROPDMGEXP)\nsummary(dataPreprocessed$CROPDMGEXP)\n```\n\n\n9. Create new columns: \n* HealthDamage = FATALITIES + INJURIES\n* Transform PROPDMGEXP and CROPDMGEXP into a number: B -> 10^9, M -> 10^6, K -> 10^3\n* PropertyDamage = PROPDMG * newPROPDMGEXP\n* CropDamage = CROPDMG * newCROPDMGEXP\n\n```{r echo=TRUE}\n#Create Health harm total\nsummary(dataPreprocessed)\ndataPreprocessed %>%\n         mutate(HealthDamage = FATALITIES + INJURIES) -> dataPreprocessed \n\n#Create Property damage total\n#Type of exponents -> Billion, Million, K thousand\ndataPreprocessed %>%\n         mutate(multiPROPDM = ifelse(PROPDMGEXP == 'B', 10^9, \n                                     ifelse(PROPDMGEXP == 'M', 10^6, \n                                            ifelse(PROPDMGEXP == 'K', 10^3, 1)))) %>%\n         mutate(PropertyDamage = as.numeric(multiPROPDM) * as.numeric(PROPDMG)) -> dataPreprocessed\n\n#Create Crop damage total\n#Type of exponents -> Billion, Million, K thousand\ndataPreprocessed %>%\n         mutate(multiCROPDM = ifelse(CROPDMGEXP == 'B', 10^9, \n                                     ifelse(CROPDMGEXP == 'M', 10^6, \n                                            ifelse(CROPDMGEXP == 'K', 10^3, 1)))) %>%\n         mutate(CropDamage = as.numeric(multiCROPDM) * as.numeric(CROPDMG)) -> dataPreprocessed\n```\n\n```{r getFatalitiesAndInjuries, echo=TRUE}\n##TOP per Event Type\n#Set top to 10\ntop <- 10\n\n##TOP of Combined Health Harmful per Event Type\n#Group by EVTYPE and sum all HealthDamage, rename columns and order desc by HealthDamage\ndataAgregateCombined <- with(dataPreprocessed, aggregate(HealthDamage, list(EVTYPE), sum))\ndataAgregateCombined <- rename(dataAgregateCombined, EventType = Group.1, HealthDamage = x)\ndataAgrCombinedTop <- arrange(dataAgregateCombined, desc(HealthDamage))[1:top,]\n\n#Calculate total Health damage and total Health damage per TOP10 and TOP3\ntotalHealthDamage <- sum(dataAgregateCombined$HealthDamage)\ntotalHealthDamageTop10 <- sum(dataAgrCombinedTop$HealthDamage)\ntotalHealthDamageTop3 <- sum(dataAgrCombinedTop$HealthDamage[1:3])\n\n\n#Calculate percent of Health damage per Event Type\ndataAgrCombinedTop %>% mutate(percentHealthDamage = round(HealthDamage / totalHealthDamage * 100,1)) -> dataAgrCombinedTop\n\n\n\n##TOP of Fatalities per Event Type\ndataAgregateFatalities <- with(dataPreprocessed, aggregate(FATALITIES, list(EVTYPE), sum))\ndataAgregateFatalities <- rename(dataAgregateFatalities, EventType = Group.1, FATALITIES = x)\ndAFatalitiesTop <-arrange(dataAgregateFatalities,desc(FATALITIES))[1:top,]\n\ntotalFatalities <- sum(dataAgregateFatalities$FATALITIES)\n\ndAFatalitiesTop %>% mutate(percentFatalities = round(FATALITIES / totalFatalities * 100,1)) -> dAFatalitiesTop\n\n#TOP of Injuries per Event Type\ndataAgregateINJURIES <- with(dataPreprocessed, aggregate(INJURIES, list(EVTYPE), sum))\ndataAgregateINJURIES <- rename(dataAgregateINJURIES, EventType = Group.1, INJURIES = x)\ndAInjuriesTop <- arrange(dataAgregateINJURIES, desc(INJURIES))[1:top,]\n\ntotalInjuries <- sum(dataAgregateINJURIES$INJURIES)\n\ndAInjuriesTop %>% mutate(percentInjuries = round(INJURIES / totalInjuries * 100,1)) -> dAInjuriesTop\n\n\n\n\n#Change the factor order\ndAFatalitiesTop$EventType <- factor(dAFatalitiesTop$EventType, levels = dAFatalitiesTop$EventType[order(dAFatalitiesTop$FATALITIES)])\n\ndAInjuriesTop$EventType <- factor(dAInjuriesTop$EventType, levels = dAInjuriesTop$EventType[order(dAInjuriesTop$INJURIES)])\n\n\n```\n\nCode to generate plots that shows Top 10 Event type per Fatalities, Injuries and combined of both:\n\n```{r plotHarmful, echo=TRUE, eval=FALSE, fig.height=10, fig.width=11}\nlibrary(ggplot2)\n\n#Var to define margin to put labels over bars on plot\nbarMargin <- 1.2\n\n##Plot combined Harmful \n\n#Change factor order to plotting\ndataAgrCombinedTop$EventType <- factor(dataAgrCombinedTop$EventType, \n                                       levels = dataAgrCombinedTop$EventType[order(dataAgrCombinedTop$HealthDamage)])\n\ngc <- ggplot(data=dataAgrCombinedTop, aes(x=EventType, y=HealthDamage , fill=EventType))\ngc <- gc + geom_bar(stat=\"identity\", show_guide = FALSE, colour=\"black\")\ngc <- gc + ylim(0, 30000)\ngc <- gc + coord_flip() + geom_text(aes(label=HealthDamage), hjust=-.25, vjust=0.5, size=4)\ngc <- gc + xlab(\"Event type\") + ylab(\"Combined: Fatalities + Injuries\")\nggplotCombined <- gc + ggtitle(\"Top 10 Event type per Total Combined: Fatalities + Injuries\")\n\n        gc <- ggplot(data=dataAgrCombinedTop, aes(x=EventType, y=percentHealthDamage , fill=EventType))\n        gc <- gc + geom_bar(stat=\"identity\", show_guide = FALSE, colour=\"black\")\n        gc <- gc + ylim(0, dataAgrCombinedTop$percentHealthDamage[1]*barMargin)\n        gc <- gc + coord_flip() + geom_text(aes(label=HealthDamage), hjust=-.25, vjust=0.5, size=4)\n        gc <- gc + xlab(\"\") + ylab(\"% over total Combined: Fatalities + Injuries\")\n        ggplotCombinedPercent <- gc + ggtitle(\"Top 10 Event type per % Combined: Fatalities + Injuries\")\n\ngf <- ggplot(data=dAFatalitiesTop, aes(x=EventType, y=FATALITIES , fill=EventType))\ngf <- gf + geom_bar(stat=\"identity\", show_guide = FALSE, colour=\"black\")\ngf <- gf + ylim(0, dAFatalitiesTop$FATALITIES[1]*1.2)\ngf <- gf + coord_flip() + geom_text(aes(label=FATALITIES), hjust=-0.25, vjust=0.5, size=4)\ngf <- gf + xlab(\"Event type\") + ylab(\"Fatalities\")\nggplotFatalities <- gf + ggtitle(\"Top 10 Event type per Total Fatalities\")\n\n        gfp <- ggplot(data=dAFatalitiesTop, aes(x=EventType, y=percentFatalities , fill=EventType))\n        gfp <- gfp + geom_bar(stat=\"identity\", show_guide = FALSE, colour=\"black\")\n        gfp <- gfp + ylim(0, 25)\n        gfp <- gfp + coord_flip() + geom_text(aes(label=percentFatalities), hjust=-.25, vjust=0.5, size=4)\n        gfp <- gfp + xlab(\"\") + ylab(\"% over total Fatalities\")\n        gfp <- gfp + ggtitle(\"Top 10 Event type per % Fatalities\")\n        ggplotFatalitiesPercent <- gfp + scale_fill_discrete(name=\"Sum of % from TOP 10\")\n\ngi <- ggplot(data=dAInjuriesTop, aes(x=EventType, y=INJURIES , fill=EventType))\ngi <- gi + geom_bar(stat=\"identity\", show_guide = FALSE, colour=\"black\")\ngi <- gi + ylim(0, dAInjuriesTop$INJURIES[1]*barMargin)\ngi <- gi + coord_flip() + geom_text(aes(label=INJURIES), hjust=-.25, vjust=0.5, size=4)\ngi <- gi + xlab(\"Event type\") + ylab(\"Injuries\")\nggplotInjuries <- gi + ggtitle(\"Top 10 Event type per Total Injuries\")\n\n        gip <- ggplot(data=dAInjuriesTop, aes(x=EventType, y=percentInjuries , fill=EventType))\n        gip <- gip + geom_bar(stat=\"identity\", show_guide = FALSE, colour=\"black\")\n        gip <- gip + ylim(0, dAInjuriesTop$percentInjuries[1]*barMargin)\n        gip <- gip + coord_flip() + geom_text(aes(label=percentInjuries), hjust=-.25, vjust=0.5, size=4)\n        gip <- gip + xlab(\"\") + ylab(\"% over total Injuries\")\n        ggplotInjuriesPercent <- gip + ggtitle(\"Top 10 Event type per % Injuries\")\n\n\n\nrequire(gridExtra)\ngrid.arrange(ggplotCombined, ggplotCombinedPercent,\n             ggplotFatalities, ggplotFatalitiesPercent, \n             ggplotInjuries, ggplotInjuriesPercent, \n             nrow = 3, ncol=2,\n             main=textGrob(\"Figure 1. Top 10 Event Type per Fatalities, Injuries and combined damage.\"\n                           ,gp=gpar(fontsize=20,font=3))\n             )\n\n\n```\n\nTable combined Harmful (Fatalities + Injuries):\n\n```{r tableHarmful, echo=TRUE, eval=FALSE}\n#Use library xtable to generate html table\nlibrary(xtable)\nxtableHarmful <- xtable(select(dataAgrCombinedTop, EventType, HealthDamage, percentHealthDamage))\nprint(xtableHarmful, type = \"html\")\n```\n\n##Results\n\n###Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?\n\n####TOP 10 most harmful effects to poblation are:\n\n```{r printTableHarmful, ref.label='tableHarmful', echo=FALSE, results='asis'}\n```\n\nTop 10 is `r sum(dataAgrCombinedTop$percentHealthDamage)` % of total Harmful of all events. \nTop 10 caused a total of `r as.character(totalHealthDamageTop10)` victims.\n\nTop 3 is `r sum(dataAgrCombinedTop$percentHealthDamage[1:3])` % of total Harmful of all events. \nTop 3 caused a total of  `r as.character(totalHealthDamageTop3)` victims.\n\n\n####Here's a detailed graph:\n\n```{r printPlotHarmful, ref.label='plotHarmful', echo=FALSE, fig.height=10, fig.width=11}\n```\n\n\n##Across the United States, which types of events have the greatest economic consequences?\n\n",
    "created" : 1434370021313.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2235942817",
    "id" : "A707D021",
    "lastKnownWriteTime" : 1434482612,
    "path" : "D:/Privado/repos/5.ReproducibleResearch/PeerAssessment2/PA2.Rmd",
    "project_path" : "PA2.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}