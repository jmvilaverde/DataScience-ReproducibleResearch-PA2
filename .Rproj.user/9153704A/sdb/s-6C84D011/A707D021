{
    "contents" : "---\ntitle: Data Science - Reproducible Research - Peer Assessment 2 - Analysis of Weather Event in US and Harmful and Economic impact using NOAA Storm Database \nauthor: \"by jmvilaverde\"\ndate: \"Monday, June 15, 2015\"\noutput:\n  html_document:\n    keep_md: yes\n    pandoc_args:\n    - +RTS\n    - -K64m\n    - -RTS\n---\n\n\n\n\n***\n\n\n##Synopsis: \n\nBased on data extracted from NOAA Storm Database for event registered in US from year 1996 to present, and analyzed with the procedure described in next section _Data Processing_, are obtained the subsequent conclusions:\n\nHuman harmful:\n* *TOP 3* most harmful events are *TORNADO (33.9%), HEAT (14.3%) and FLOOD (11%)* that causes *59.2 %* of total harmful of all events. \n* *TOP 10* causes *86 %* of total harmful, it is a total of *56179 fatalities or people injured*.\n\nEconomic damages:\n* *TOP 3* event types that causes most economic damages are *FLOOD (37.4%), HURRICANTE/TYPHOON (18%) and STORM SURGE (10.9%)* that causes *66.3 %* of total Economic damage of all events. \n* *TOP 10* causes *91.8 %* of total economic damages, over *397 Billion $*.\n\n_Can view detail in section Results._\n\n***\n\n##Data Processing\n\n####1.First step, adquire the date from [https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2] and put it into a data frame container:\n\n```{r dataAdquisition, echo=TRUE, cache=TRUE}\n#Set data path, using setInternet2 to avoid problems with https download\nsetInternet2(use = TRUE)\ndataPath <- \"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2\"\nfileName <- \"StormData.csv.bz2\"\n\n#Download the file\nif (!file.exists(fileName)) download.file(url = dataPath, destfile = fileName)\n\n#Extract bz2 file to a dataframe\ndataInitial <- read.csv(bzfile(fileName))\n```\n\nAs additional information, on http://www.ncdc.noaa.gov/stormevents/details.jsp?type=eventtype\ninform about information recolection, and only have a complete collection from 1996 to present:\n_3. All Event Types (48 from Directive 10-1605): From 1996 to present, 48 event types are recorded as defined in NWS Directive 10-1605._\n\nBecause only have a complete collection from 1996 to present is taken as criteria to filter the data to keep only information from 1996 to present.\n\n####2.Get only relevant fields:\n\n```{r echo=TRUE}\n#Identify fields\nnames(dataInitial)\n```\n\nFor our process are needed: BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP.\n\nAre relevant for filter Date (BGN_DATE) and States (STATE).\n\n####3.Analyze BGN_DATE and STATE, in order to know what class have the data and how to process it: \n\n```{r echo=TRUE}\n#Identify structure\nstr(dataInitial$BGN_DATE)\nhead(dataInitial$BGN_DATE)\nstr(dataInitial$STATE)\n```\n\nBGN_DATE and STATE are factors.\n\n####4.We need to transform BGN_DATE from factor into a Date class in order to filter by year.\n\n```{r filterDate, echo=TRUE}\n\n#Use library lubridate to manage Date\nlibrary(lubridate)\n\n#Transform BGN_DATE into a class  Date\ndataInitial$date <- as.Date(dataInitial$BGN_DATE, format = \"%m/%d/%Y\")\nclass(dataInitial$date)\n\n#Data filtered by year >= 1996\ndataYearProcessed <- dataInitial[year(dataInitial$date)>=1996,]\n\n#Percent of data removed filtering by Year\npercentDataRemYear <- round((1-(nrow(dataYearProcessed)/nrow(dataInitial))) * 100, 2)\n```\n\nThis filter has removed `r percentDataRemYear`% of data.\n\n####5.Filter to get only data from US States:\n\n```{r filterStates, echo=TRUE}\n#Data filtered by States\ndataStatesProcessed <- dataYearProcessed[dataYearProcessed$STATE %in% state.abb,]\n\n#Percent of data removed filtering by State\npercentDataRemStates <- round((1- (nrow(dataStatesProcessed)/nrow(dataYearProcessed)))*100, 2)\n```\n\nThis filter has removed `r percentDataRemStates`% of data from precedent filter.\n\n\n####6.Select necesary fields: EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP.\n\n```{r processFilterData, echo=TRUE}\nlibrary(dplyr)\n\n#Select only necesary fields: Type of event, Number of fatalities, Number of injuries, Property damages, Property damages exponent,\n#Crop damages, and Crop damages exponent.\ndataStatesProcessed %>% \n        select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) -> dataPreprocessed\n```\n\n####7.Evaluate event types and clean. Do this by unifying and removing event types:\n\nUse [http://www.ncdc.noaa.gov/stormevents/pd01016005curr.pdf] as reference to clean types.\n\n* Unify TSTM WIND with THUNDERSTORM WIND.\n* Unify EXCESSIVE HEAT with HEAT.\n* Remove Summary, that is not an Event Type.\n\n```{r echo=TRUE}\n#Evaluate how many levels have the dataset\nunique(dataPreprocessed$EVTYPE)\n\n##Running the report, are detected some Events that are repeated in the top 10 table.\n#TSTM WIND it's the same as THUNDERSTORM WIND. We make the sustitution on data\ndataPreprocessed[grepl(pattern = \"TSTM WIND\", x=dataPreprocessed$EVTYPE),]$EVTYPE <- \"THUNDERSTORM WIND\"\n\n#EXCESSIVE HEAT it's the same as HEAT. We make the sustitution on data\ndataPreprocessed[grepl(pattern = \"EXCESSIVE HEAT\", x=dataPreprocessed$EVTYPE),]$EVTYPE <- \"HEAT\"\n\n#Remove Summary from event type\ndataPreprocessed <- dataPreprocessed[!grepl(pattern = \"Summary\", x=dataPreprocessed$EVTYPE),]\n```\n\n####8.Analyze content of PROPDMGEXP and CROPDMGEXP:\n\n```{r echo=TRUE}\nsummary(dataPreprocessed$PROPDMGEXP)\nsummary(dataPreprocessed$CROPDMGEXP)\n```\n\nUse as EXP values B, M and K.\n\n####9.Create new columns: \n\n* HealthDamage = FATALITIES + INJURIES\n* Transform PROPDMGEXP and CROPDMGEXP into a number: B -> 10^9, M -> 10^6, K -> 10^3\n* PropertyDamage = PROPDMG * newPROPDMGEXP\n* CropDamage = CROPDMG * newCROPDMGEXP\n\n```{r echo=TRUE}\n#Create Health harm total\ndataPreprocessed %>%\n         mutate(HealthDamage = FATALITIES + INJURIES) -> dataPreprocessed\n\n#Create Property damage total\n#Type of exponents -> Billion, Million, K thousand\ndataPreprocessed %>%\n         mutate(multiPROPDM = ifelse(PROPDMGEXP == 'B', 10^9, \n                                     ifelse(PROPDMGEXP == 'M', 10^6, \n                                            ifelse(PROPDMGEXP == 'K', 10^3, 1)))) %>%\n         mutate(PropDamage = as.numeric(multiPROPDM) * as.numeric(PROPDMG)) -> dataPreprocessed\n\n#Create Crop damage total\n#Type of exponents -> Billion, Million, K thousand\ndataPreprocessed %>%\n         mutate(multiCROPDM = ifelse(CROPDMGEXP == 'B', 10^9, \n                                     ifelse(CROPDMGEXP == 'M', 10^6, \n                                            ifelse(CROPDMGEXP == 'K', 10^3, 1)))) %>%\n         mutate(CropDamage = as.numeric(multiCROPDM) * as.numeric(CROPDMG)) -> dataPreprocessed\n\n#Create Damage total\ndataPreprocessed %>%\n         mutate(EconomicDamage = PropDamage + CropDamage) -> dataPreprocessed\n\nsummary(dataPreprocessed)\n```\n\n\n####10.Create TOP10 data sets Harmful and Economic damages:\n\n```{r getFatalitiesAndInjuries, echo=TRUE}\n##TOP per Event Type\n#Set top to 10\ntop <- 10\n\n##TOP of Combined Health Harmful per Event Type\n#Group by EVTYPE and sum all HealthDamage, rename columns and order desc by HealthDamage\ndataAgregateCombined <- with(dataPreprocessed, aggregate(HealthDamage, list(EVTYPE), sum))\ndataAgregateCombined <- rename(dataAgregateCombined, EventType = Group.1, HealthDamage = x)\ndataAgrCombinedTop <- arrange(dataAgregateCombined, desc(HealthDamage))[1:top,]\n\n#Change the factor order\ndataAgrCombinedTop$EventType <- factor(dataAgrCombinedTop$EventType, levels = dataAgrCombinedTop$EventType[order(dataAgrCombinedTop$HealthDamage)])\n\n#Calculate total Health damage and total Health damage per TOP10 and TOP3\ntotalHealthDamage <- sum(dataAgregateCombined$HealthDamage)\ntotal.HealthDamage.Top10 <- sum(dataAgrCombinedTop$HealthDamage)\ntotal.HealthDamage.Top3 <- sum(dataAgrCombinedTop$HealthDamage[1:3])\n\n#Calculate percent of Health damage per Event Type\ndataAgrCombinedTop %>% mutate(percentHealthDamage = round(HealthDamage / totalHealthDamage * 100,1)) -> dataAgrCombinedTop\n\n\n##TOP of Fatalities per Event Type\n#Group by EVTYPE and sum all FATALITIES, rename columns and order desc by FATALITIES\ndataAgregateFatalities <- with(dataPreprocessed, aggregate(FATALITIES, list(EVTYPE), sum))\ndataAgregateFatalities <- rename(dataAgregateFatalities, EventType = Group.1, FATALITIES = x)\ndAFatalitiesTop <-arrange(dataAgregateFatalities,desc(FATALITIES))[1:top,]\n\n#Change the factor order\ndAFatalitiesTop$EventType <- factor(dAFatalitiesTop$EventType, levels = dAFatalitiesTop$EventType[order(dAFatalitiesTop$FATALITIES)])\n\n#Calculate total FATALITIES \ntotalFatalities <- sum(dataAgregateFatalities$FATALITIES)\n\n#Calculate percent of FATALITIES  per Event Type\ndAFatalitiesTop %>% mutate(percentFatalities = round(FATALITIES / totalFatalities * 100,1)) -> dAFatalitiesTop\n\n\n##TOP of Injuries per Event Type\n#Group by EVTYPE and sum all INJURIES, rename columns and order desc by INJURIES\ndataAgregateINJURIES <- with(dataPreprocessed, aggregate(INJURIES, list(EVTYPE), sum))\ndataAgregateINJURIES <- rename(dataAgregateINJURIES, EventType = Group.1, INJURIES = x)\ndAInjuriesTop <- arrange(dataAgregateINJURIES, desc(INJURIES))[1:top,]\n\n#Calculate total INJURIES \ntotalInjuries <- sum(dataAgregateINJURIES$INJURIES)\n\n#Calculate percent of INJURIES  per Event Type\ndAInjuriesTop %>% mutate(percentInjuries = round(INJURIES / totalInjuries * 100,1)) -> dAInjuriesTop\n\n#Change the factor order\ndAInjuriesTop$EventType <- factor(dAInjuriesTop$EventType, levels = dAInjuriesTop$EventType[order(dAInjuriesTop$INJURIES)])\n```\n\n```{r getDamages, echo=TRUE}\n##TOP per Event Type\n#Set top to 10\ntop <- 10\n\n##TOP of Combined Economic Damage per Event Type\n#Group by EVTYPE and sum all EconomicDamage, rename columns and order desc by EconomicDamage\ndataAgregate.EconomicDamage <- with(dataPreprocessed, aggregate(EconomicDamage, list(EVTYPE), sum))\ndataAgregate.EconomicDamage <- rename(dataAgregate.EconomicDamage, EventType = Group.1, EconomicDamage = x)\ndataAgregate.EconomicDamage.Top <- arrange(dataAgregate.EconomicDamage, desc(EconomicDamage))[1:top,]\n\n#Change the factor order\ndataAgregate.EconomicDamage.Top$EventType <- factor(dataAgregate.EconomicDamage.Top$EventType, levels = dataAgregate.EconomicDamage.Top$EventType[order(dataAgregate.EconomicDamage.Top$EconomicDamage)])\n\n#Calculate total Health damage and total Health damage per TOP10 and TOP3\ntotal.EconomicDamage <- sum(dataAgregate.EconomicDamage$EconomicDamage)\ntotal.EconomicDamage.Top10 <- sum(dataAgregate.EconomicDamage$EconomicDamage.Top)\ntotal.EconomicDamage.Top3 <- sum(dataAgregate.EconomicDamage$EconomicDamage.Top[1:3])\ntotal.EconomicDamage.Top10\ntotal.EconomicDamage.Top3\n#Calculate percent of Health damage per Event Type\ndataAgregate.EconomicDamage.Top %>% \n        mutate(percent.EconomicDamage = round(EconomicDamage / total.EconomicDamage * 100,1)) -> dataAgregate.EconomicDamage.Top\n\n\n##TOP of Prop Damages per Event Type\n#Group by EVTYPE and sum all PropDamage, rename columns and order desc by PropDamage\ndataAgregate.PropDamage <- with(dataPreprocessed, aggregate(PropDamage, list(EVTYPE), sum))\ndataAgregate.PropDamage <- rename(dataAgregate.PropDamage, EventType = Group.1, PropDamage = x)\ndataAgregate.PropDamage.Top <-arrange(dataAgregate.PropDamage,desc(PropDamage))[1:top,]\n\n#Change the factor order\ndataAgregate.PropDamage.Top$EventType <- factor(dataAgregate.PropDamage.Top$EventType, levels = dataAgregate.PropDamage.Top$EventType[order(dataAgregate.PropDamage.Top$PropDamage)])\n\n#Calculate total FATALITIES \ntotal.PropDamage <- sum(dataAgregate.PropDamage$PropDamage)\n\n#Calculate percent of FATALITIES  per Event Type\ndataAgregate.PropDamage.Top %>% \n        mutate(percent.PropDamage = round(PropDamage / total.PropDamage * 100,1)) -> dataAgregate.PropDamage.Top\n\n\n##TOP of Crop Damages per Event Type\n#Group by EVTYPE and sum all CropDamage, rename columns and order desc by CropDamage\ndataAgregate.CropDamage <- with(dataPreprocessed, aggregate(CropDamage, list(EVTYPE), sum))\ndataAgregate.CropDamage <- rename(dataAgregate.CropDamage, EventType = Group.1, CropDamage = x)\ndataAgregate.CropDamage.Top <- arrange(dataAgregate.CropDamage, desc(CropDamage))[1:top,]\n\n#Calculate total INJURIES \ntotal.CropDamage <- sum(dataAgregate.CropDamage$CropDamage)\n\n#Calculate percent of INJURIES  per Event Type\ndataAgregate.CropDamage.Top %>% \n        mutate(percent.CropDamage = round(CropDamage / total.CropDamage * 100,1)) -> dataAgregate.CropDamage.Top\n\n#Change the factor order\ndataAgregate.CropDamage.Top$EventType <- factor(dataAgregate.CropDamage.Top$EventType, levels = dataAgregate.CropDamage.Top$EventType[order(dataAgregate.CropDamage.Top$CropDamage)])\n\n\n```\n\n####11. Code to generate plots that shows Top 10 Event type per Fatalities, Injuries and combined of both:\n\n```{r plotHarmful, echo=TRUE, eval=FALSE, fig.height=10, fig.width=11}\nlibrary(ggplot2)\n\n#Var to define margin to put labels over bars on plot\nbarMargin <- 1.2\n\n##Plot combined Harmful \n\n#Change factor order to plotting\ndataAgrCombinedTop$EventType <- factor(dataAgrCombinedTop$EventType, \n                                       levels = dataAgrCombinedTop$EventType[order(dataAgrCombinedTop$HealthDamage)])\n\n# getPlot <- function(dataPlot, xfield, yfield, xlabel, ylabel, title){\n#         g <- ggplot(data=dataPlot, aes(x=xfield, y=yfield , fill=xfield))\n#         g <- g + geom_bar(stat=\"identity\", show_guide = FALSE, colour=\"black\")\n#         g <- g + ylim(0, max(yfield)*1.2)\n#         g <- g + coord_flip() + geom_text(aes(label=yfield), hjust=-.25, vjust=0.5, size=4)\n#         g <- g + xlab(xlabel) + ylab(ylabel)\n#         g <- g + ggtitle(title)\n#         g\n#         #return ggplot.resultant\n# }\n# \n# ggplotCombined <- getPlot(dataPlot = dataAgrCombinedTop, xfield = dataAgrCombinedTop$EventType, \n#                           yfield = dataAgrCombinedTop$HealthDamage, xlabel = \"Event type\",\n#                           ylabel = \"Combined: Fatalities + Injuries\", \n#                           title = \"Top 10 Event type per Total Combined: Fatalities + Injuries\")\n\n##Common parameters\ntitleSize <- 10\ngb <- geom_bar(stat=\"identity\", show_guide = FALSE, colour=\"black\")\nt <- theme(plot.title = element_text(size=titleSize))\n#gcommon <- gb + t     \n\n\n\ng <- ggplot(data=dataAgrCombinedTop, aes(x=EventType, y=HealthDamage, fill=EventType))\ng <- g + gb\ng <- g + ylim(0, dataAgrCombinedTop$HealthDamage[1]*barMargin)\ng <- g + coord_flip() + geom_text(aes(label=HealthDamage), hjust=-.25, vjust=0.5, size=4)\ng <- g + xlab(\"Event type\") + ylab(\"Number of Fatalities + Injuries\") \ng <- g + ggtitle(\"Total Combined: Fatalities + Injuries per Event Type\")\nggplotCombined <- g + t\n\n        g <- ggplot(data=dataAgrCombinedTop, aes(x=EventType, y=percentHealthDamage , fill=EventType))\n        g <- g + gb\n        g <- g + ylim(0, dataAgrCombinedTop$percentHealthDamage[1]*barMargin)\n        g <- g + coord_flip() + geom_text(aes(label=percentHealthDamage), hjust=-.25, vjust=0.5, size=4)\n        g <- g + xlab(\"\") + ylab(\"% Combined: Fatalities + Injuries\")\n        g <- g + ggtitle(\"% Combined: Fatalities + Injuries per Event Type\")\n        ggplotCombinedPercent <- g + t\n\ng <- ggplot(data=dAFatalitiesTop, aes(x=EventType, y=FATALITIES , fill=EventType))\ng <- g + gb\ng <- g + ylim(0, dAFatalitiesTop$FATALITIES[1]*1.2)\ng <- g + coord_flip() + geom_text(aes(label=FATALITIES), hjust=-0.25, vjust=0.5, size=4)\ng <- g + xlab(\"Event type\") + ylab(\"Fatalities\")\ng <- g + ggtitle(\"Total Fatalities per Event type\")\nggplotFatalities <- g + t\n\n        g <- ggplot(data=dAFatalitiesTop, aes(x=EventType, y=percentFatalities , fill=EventType))\n        g <- g + gb\n        g <- g + ylim(0, dAFatalitiesTop$percentFatalities[1]*barMargin)\n        g <- g + coord_flip() + geom_text(aes(label=percentFatalities), hjust=-.25, vjust=0.5, size=4)\n        g <- g + xlab(\"\") + ylab(\"% Fatalities\")\n        g <- g + ggtitle(\"% Fatalities per Event type\")\n        ggplotFatalitiesPercent <- g + t\n\ng <- ggplot(data=dAInjuriesTop, aes(x=EventType, y=INJURIES , fill=EventType))\ng <- g + gb\ng <- g + ylim(0, dAInjuriesTop$INJURIES[1]*barMargin)\ng <- g + coord_flip() + geom_text(aes(label=INJURIES), hjust=-.25, vjust=0.5, size=4)\ng <- g + xlab(\"Event type\") + ylab(\"Injuries\")\ng <- g + ggtitle(\"Total Injuries per Event type\")\nggplotInjuries <- g + t\n\n        g <- ggplot(data=dAInjuriesTop, aes(x=EventType, y=percentInjuries , fill=EventType))\n        g <- g + gb\n        g <- g + ylim(0, dAInjuriesTop$percentInjuries[1]*barMargin)\n        g <- g + coord_flip() + geom_text(aes(label=percentInjuries), hjust=-.25, vjust=0.5, size=4)\n        g <- g + xlab(\"\") + ylab(\"% Injuries\")\n        g <- g + ggtitle(\"% Injuries per Event type\")\n        ggplotInjuriesPercent <- g + t\n\n\n\nrequire(gridExtra)\ngrid.arrange(ggplotCombined, ggplotCombinedPercent,\n             ggplotFatalities, ggplotFatalitiesPercent, \n             ggplotInjuries, ggplotInjuriesPercent, \n             nrow = 3, ncol=2,\n             main=textGrob(\"Figure 1. Top 10 Total number of Fatalities, Injuries and Combined Damage per Event Type.\"\n                           ,gp=gpar(fontsize=16,font=3))\n             )\n\n\n```\n\n####12.Create Table combined Harmful (Fatalities + Injuries):\n\n```{r tableHarmful, echo=TRUE, eval=FALSE}\n#Use library xtable to generate html table\nlibrary(xtable)\nxtableHarmful <- xtable(select(dataAgrCombinedTop, EventType, HealthDamage, percentHealthDamage))\nprint(xtableHarmful, type = \"html\")\n```\n\n\n####13.Code to generate plots that shows Top 10 Event type per Property damages, Crop damages and combined of both:\n\n```{r plotEconomicDamages, echo=TRUE, eval=TRUE, fig.height=10, fig.width=11}\nlibrary(ggplot2)\n\n#Common values for plots\ntitleSize <- 10\ngb <- geom_bar(stat=\"identity\", show_guide = FALSE, colour=\"black\")\nt <- theme(plot.title = element_text(size=titleSize))\nbarMargin <- 1.2\nunitsDollars <- 10^9\nlabelDollars <- \"US$ Billions\"\ntitleSize <- 10\n##Plot combined Harmful \n\ng <- ggplot(data=dataAgregate.EconomicDamage.Top, aes(x=EventType, y=EconomicDamage/unitsDollars, fill=EventType))\ng <- g + gb\ng <- g + ylim(0, dataAgregate.EconomicDamage.Top$EconomicDamage[1]/unitsDollars*barMargin)\ng <- g + coord_flip() + geom_text(aes(label=round(EconomicDamage/unitsDollars,1)), hjust=-.25, vjust=0.5, size=4)\ng <- g + xlab(\"Event type\") + ylab(labelDollars)\ng <- g + ggtitle(\"Event type vs. Economic Damage: Property + Crops\")\nggplot.EconomicDamage <- g + t\n\n        g <- ggplot(data=dataAgregate.EconomicDamage.Top, aes(x=EventType, y=percent.EconomicDamage , fill=EventType))\n        g <- g + gb\n        g <- g + ylim(0, dataAgregate.EconomicDamage.Top$percent.EconomicDamage[1]*barMargin)\n        g <- g + coord_flip() + geom_text(aes(label=percent.EconomicDamage), hjust=-.25, vjust=0.5, size=4)\n        g <- g + xlab(\"\") + ylab(\"% over Total Economic Damage: Property + Crops\")\n        g <- g + ggtitle(\"Event type vs. % Economic Damage: Property + Crops\")\n        ggplot.EconomicDamage.Percent <- g + t\n        \ng <- ggplot(data=dataAgregate.PropDamage.Top, aes(x=EventType, y=PropDamage/unitsDollars, fill=EventType))\ng <- g + gb\ng <- g + ylim(0, dataAgregate.PropDamage.Top$PropDamage[1]/unitsDollars*barMargin)\ng <- g + coord_flip() + geom_text(aes(label=round(PropDamage/unitsDollars,1)), hjust=-.25, vjust=0.5, size=4)\ng <- g + xlab(\"Event type\") + ylab(labelDollars)\ng <- g + ggtitle(\"Top 10 Event type vs. Property Damage\")\nggplot.PropDamage <- g + t\n\n        g <- ggplot(data=dataAgregate.PropDamage.Top, aes(x=EventType, y=percent.PropDamage, fill=EventType))\n        g <- g + gb\n        g <- g + ylim(0, dataAgregate.PropDamage.Top$percent.PropDamage[1]*barMargin)\n        g <- g + coord_flip() + geom_text(aes(label=percent.PropDamage), hjust=-.25, vjust=0.5, size=4)\n        g <- g + xlab(\"\") + ylab(\"% over Total Property Damage\")\n        g <- g + ggtitle(\"Top 10 Event type vs. % Property Damage\")\n        ggplot.PropDamage.Percent <- g + t\n\ng <- ggplot(data=dataAgregate.CropDamage.Top, aes(x=EventType, y=CropDamage/unitsDollars, fill=EventType))\ng <- g + gb\ng <- g + ylim(0, dataAgregate.CropDamage.Top$CropDamage[1]/unitsDollars*barMargin)\ng <- g + coord_flip() + geom_text(aes(label=round(CropDamage/unitsDollars,1)), hjust=-.25, vjust=0.5, size=4)\ng <- g + xlab(\"Event type\") + ylab(labelDollars)\ng <- g + ggtitle(\"Top 10 Event type vs. Crop Damage\")\nggplot.CropDamage <- g + t\n\n        g <- ggplot(data=dataAgregate.CropDamage.Top, aes(x=EventType, y=percent.CropDamage, fill=EventType))\n        g <- g + gb\n        g <- g + ylim(0, dataAgregate.CropDamage.Top$percent.CropDamage[1]*barMargin)\n        g <- g + coord_flip() + geom_text(aes(label=percent.CropDamage), hjust=-.25, vjust=0.5, size=4)\n        g <- g + xlab(\"\") + ylab(\"% over Total Crop Damage\")\n        g <- g + ggtitle(\"Top 10 Event type vs. % Crop Damage\")\n        ggplot.CropDamage.Percent <- g + t\n\nrequire(gridExtra)\ngrid.arrange(ggplot.EconomicDamage, ggplot.EconomicDamage.Percent,\n             ggplot.PropDamage, ggplot.PropDamage.Percent,\n             ggplot.CropDamage, ggplot.CropDamage.Percent,\n             nrow = 3, ncol=2,\n             main=textGrob(\"Figure 2. Top 10 Event Type per Property, Crops and Combined Economic Damage.\"\n                           ,gp=gpar(fontsize=16,font=3))\n             )\n\n\n```\n\n####14.Create Table Economic Damage:\n\n```{r tableEconomicDamage, echo=TRUE, eval=FALSE}\n#Use library xtable to generate html table\nlibrary(xtable)\nxtable.EconomicDamage <- xtable(select(dataAgregate.EconomicDamage.Top, EventType, EconomicDamage, percent.EconomicDamage))\nprint(xtable.EconomicDamage, type = \"html\")\n```\n\n##Results\n\n###Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?\n\n####TOP 10 most harmful effects to poblation are:\n\n```{r printTableHarmful, ref.label='tableHarmful', echo=FALSE, results='asis'}\n```\n\nTop 10 is `r sum(dataAgrCombinedTop$percentHealthDamage)` % of total Harmful of all events. \nTop 10 caused a total of `r as.character(total.HealthDamage.Top10)` victims.\n\nTop 3 is `r sum(dataAgrCombinedTop$percentHealthDamage[1:3])` % of total Harmful of all events. \nTop 3 caused a total of  `r as.character(total.HealthDamage.Top3)` victims.\n\n\n####Detailed graph:\n\n```{r printPlotHarmful, ref.label='plotHarmful', echo=FALSE, fig.height=10, fig.width=11}\n```\n\n\n##Across the United States, which types of events have the greatest economic consequences?\n\n####TOP 10 event type with greatest economic consequences are:\n\n```{r printTableHarmful, ref.label='tableEconomicDamage', echo=FALSE, results='asis'}\n```\n\nTop 10 accumulate `r sum(dataAgregate.EconomicDamage.Top$percent.EconomicDamage)` % of total Harmful of all events. \nTop 10 caused a total of `r as.character(total.EconomicDamage.Top10)` US $ in economic damages.\n\nTop 3 accumulate `r sum(dataAgregate.EconomicDamage.Top$percent.EconomicDamage[1:3])` % of total Harmful of all events. \nTop 3 caused a total of  `r as.character(total.EconomicDamage.Top3)` US $ in economic damages.\n\n\n####Here's a detailed graph:\n\n```{r printPlotEconomicDamages, ref.label='plotEconomicDamages', echo=FALSE, fig.height=10, fig.width=11}\n```\n\n\n\n",
    "created" : 1434370021313.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2484345580",
    "id" : "A707D021",
    "lastKnownWriteTime" : 1434563413,
    "path" : "D:/Privado/repos/5.ReproducibleResearch/PeerAssessment2/PA2.Rmd",
    "project_path" : "PA2.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}